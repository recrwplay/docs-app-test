# Use this starter workflow to deploy HTML generated by Antora to surge.sh
# Docs are published at <org>-<repo>-<deployid>.surge.sh
# 
# By default, this workflow runs on completion of a workflow called "Verify docs PR"
# 
# This workflow expects the triggering workflow to generate an artifact called "docs"
# - update the reference to "docs" and "docs.zip" in this workflow if your triggering workflow generates an artifact with a different name

name: "Publish documentation"
run-name: Publish ${{ github.event.client_payload.repo }} to ${{ github.event.client_payload.publish_env }}

on:
  repository_dispatch:
    types: 
      - publish-html
      # - publish-pdf

env:
  OWNER: ${{ github.event.client_payload.org }}
  REPO: ${{ github.event.client_payload.repo }}
  RUN_ID: ${{ github.event.client_payload.run_id }}
  PUBLISH_ENV: ${{ github.event.client_payload.publish_env }}
  ADDITIONAL_PUBLISH_DIRS: ${{ github.event.client_payload.additional_publish_dirs == null && '' || github.event.client_payload.additional_publish_dirs }}
  ARGS: ${{ github.event.client_payload.args }}
  APPROVED_PUBLISHERS: ${{ secrets.APPROVED_PUBLISHERS }}
  WORKSPACE: ${{ github.workspace }}

jobs:

  prepare-docs:

    runs-on: ubuntu-latest

    outputs:
      docsets: ${{ steps.get-docsets.outputs.docsets }}

    steps:

      - name: Cache docs dir
        id: create-cache
        uses: actions/cache@v4
        with:
          path: ./docs
          key: ${{ env.OWNER }}-${{ env.REPO }}-cache-${{ env.RUN_ID }}

      - name: "Download built documentation"
        id: download-docs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DOCS_DISPATCH_TOKEN }}
          script: |
            var artifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: '${{ env.OWNER }}',
               repo: '${{ env.REPO }}',
               run_id: ${{ env.RUN_ID }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "docs"
            })[0];
            var download = await github.rest.actions.downloadArtifact({
               owner: '${{ env.OWNER }}',
               repo: '${{ env.REPO }}',
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{ env.WORKSPACE }}/docs.zip', Buffer.from(download.data));
      
      - name: Extract files
        id: unzip
        run: |
          mkdir build
          unzip -o docs.zip -d docs

      # we could set include-hidden-files to true to include the .etc and .meta dirs
      - name: Upload HTML artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: docs/
          include-hidden-files: true
          retention-days: ${{ inputs.retain-artifacts }} 

      - name: Get docsets
        id: get-docsets
        run: |
          shopt -s globstar
          docsets=$(ls -R **/sitemap.xml | sed -r 's/docs\/([^\/]*).*/\1/' | jq -R -s -c 'split("\n")[:-1]'  | jq -c 'del(.[] | select(. == "sitemap.xml"))')
          if [[ -n $ADDITIONAL_PUBLISH_DIRS ]]; then
            jq -n $docsets | jq -c '. + ["$ADDITIONAL_PUBLISH_DIRS"]'
          fi
          echo "docsets=${docsets[@]}" >> $GITHUB_OUTPUT

  publish-docs:

    environment: 'prod'

    needs: prepare-docs

    runs-on: ubuntu-latest

    steps:

      - name: Restore docs cache
        id: restore-cache
        uses: actions/cache@v4
        with:
          path: ./docs
          key: ${{ env.OWNER }}-${{ env.REPO }}-cache-${{ env.RUN_ID }}

      - name: Summary
        id: summary
        run: |
          echo "Published to prod:" >> $GITHUB_STEP_SUMMARY
